/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2018 Piasy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import java.text.SimpleDateFormat

apply plugin: 'com.github.dcendents.android-maven'
apply plugin: "com.jfrog.bintray"

def siteUrl = "https://github.com/${rootProject.ext.userName}/${rootProject.ext.artifactName}"
def gitUrl = "https://github.com/${rootProject.ext.userName}/${rootProject.ext.artifactName}.git"
def developerInfo = rootProject.ext.developer
def licenseInfo = rootProject.ext.license

group = rootProject.ext.groupName
version = rootProject.ext.releaseVersionName

install {
    repositories.mavenInstaller {
        // This generates POM.xml with proper parameters
        pom {
            project {
                packaging 'aar'
                // Add your description here
                name rootProject.ext.artifactName
                url siteUrl
                // Set your license
                licenses {
                    license {
                        name licenseInfo.name
                        url licenseInfo.url
                    }
                }
                developers {
                    developer {
                        id developerInfo.id
                        name developerInfo.name
                        email developerInfo.email
                    }
                }
                scm {
                    connection gitUrl
                    developerConnection gitUrl
                    url siteUrl
                }
            }
        }
    }
}

task sourcesJar(type: Jar) {
    if (project.getPlugins().hasPlugin('com.android.application') ||
            project.getPlugins().hasPlugin('com.android.library')) {
        from android.sourceSets.main.java.srcDirs
    }
    classifier = 'sources'
}

if (project.getPlugins().hasPlugin('com.android.application') ||
        project.getPlugins().hasPlugin('com.android.library')) {
    def source = android.sourceSets.main.java.srcDirs
    source += "$rootProject.rootDir/generated_src/java"
    task javadoc(type: Javadoc) {
        failOnError = true
        source = source
        android.compileSdkVersion rootProject.ext.androidCompileSdkVersion
        android.buildToolsVersion rootProject.ext.androidBuildToolsVersion
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

Properties properties = new Properties()
// for wrapper project structure
File propertyFile = project.rootProject.file('gradle/bintray.properties')
if (propertyFile.exists()) {
    properties.load(propertyFile.newDataInputStream())
}

bintray {
    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.apikey")
    configurations = ['archives'] //When uploading Maven-based publication files
    dryRun = false //Whether to run this as dry-run, without deploying
    publish = true //If version should be auto published after an upload
    pkg {
        repo = 'maven'
        name = rootProject.ext.artifactName
        desc = rootProject.ext.artifactDescription
        websiteUrl = siteUrl
        issueTrackerUrl = siteUrl + '/issues'
        vcsUrl = gitUrl
        licenses = [licenseInfo.id]
        labels = rootProject.ext.artifactLabels
        publicDownloadNumbers = true
        //Optional version descriptor
        version {
            name = rootProject.ext.releaseVersionName //Bintray logical version name
            released = new SimpleDateFormat('yyyy-MM-dd\'T\'HH:mm:ss.SSSZZ').format(new Date())
            //2 possible values: date in the format of 'yyyy-MM-dd'T'HH:mm:ss.SSSZZ' OR a java.util.Date instance
            vcsTag = rootProject.ext.releaseVersionName
        }
    }
}
